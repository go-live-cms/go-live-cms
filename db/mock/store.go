// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luan-k/fiber-cms/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/luan-k/fiber-cms/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/luan-k/fiber-cms/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateImage mocks base method.
func (m *MockStore) CreateImage(ctx context.Context, arg db.CreateImageParams) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", ctx, arg)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockStoreMockRecorder) CreateImage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockStore)(nil).CreateImage), ctx, arg)
}

// CreateImageAndLinkTx mocks base method.
func (m *MockStore) CreateImageAndLinkTx(ctx context.Context, arg db.CreateImageAndLinkTxParams) (db.CreateImageAndLinkTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageAndLinkTx", ctx, arg)
	ret0, _ := ret[0].(db.CreateImageAndLinkTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImageAndLinkTx indicates an expected call of CreateImageAndLinkTx.
func (mr *MockStoreMockRecorder) CreateImageAndLinkTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageAndLinkTx", reflect.TypeOf((*MockStore)(nil).CreateImageAndLinkTx), ctx, arg)
}

// CreatePostImage mocks base method.
func (m *MockStore) CreatePostImage(ctx context.Context, arg db.CreatePostImageParams) (db.PostImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostImage", ctx, arg)
	ret0, _ := ret[0].(db.PostImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostImage indicates an expected call of CreatePostImage.
func (mr *MockStoreMockRecorder) CreatePostImage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostImage", reflect.TypeOf((*MockStore)(nil).CreatePostImage), ctx, arg)
}

// CreatePostTaxonomy mocks base method.
func (m *MockStore) CreatePostTaxonomy(ctx context.Context, arg db.CreatePostTaxonomyParams) (db.PostsTaxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostTaxonomy", ctx, arg)
	ret0, _ := ret[0].(db.PostsTaxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostTaxonomy indicates an expected call of CreatePostTaxonomy.
func (mr *MockStoreMockRecorder) CreatePostTaxonomy(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostTaxonomy", reflect.TypeOf((*MockStore)(nil).CreatePostTaxonomy), ctx, arg)
}

// CreatePostTx mocks base method.
func (m *MockStore) CreatePostTx(ctx context.Context, arg db.CreatePostTxParams) (db.CreatePostTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostTx", ctx, arg)
	ret0, _ := ret[0].(db.CreatePostTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostTx indicates an expected call of CreatePostTx.
func (mr *MockStoreMockRecorder) CreatePostTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostTx", reflect.TypeOf((*MockStore)(nil).CreatePostTx), ctx, arg)
}

// CreatePostWithImagesTx mocks base method.
func (m *MockStore) CreatePostWithImagesTx(ctx context.Context, arg db.CreatePostWithImagesTxParams) (db.CreatePostWithImagesTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostWithImagesTx", ctx, arg)
	ret0, _ := ret[0].(db.CreatePostWithImagesTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostWithImagesTx indicates an expected call of CreatePostWithImagesTx.
func (mr *MockStoreMockRecorder) CreatePostWithImagesTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostWithImagesTx", reflect.TypeOf((*MockStore)(nil).CreatePostWithImagesTx), ctx, arg)
}

// CreatePostWithTaxonomiesTx mocks base method.
func (m *MockStore) CreatePostWithTaxonomiesTx(ctx context.Context, arg db.CreatePostWithTaxonomiesTxParams) (db.CreatePostWithTaxonomiesTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostWithTaxonomiesTx", ctx, arg)
	ret0, _ := ret[0].(db.CreatePostWithTaxonomiesTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostWithTaxonomiesTx indicates an expected call of CreatePostWithTaxonomiesTx.
func (mr *MockStoreMockRecorder) CreatePostWithTaxonomiesTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostWithTaxonomiesTx", reflect.TypeOf((*MockStore)(nil).CreatePostWithTaxonomiesTx), ctx, arg)
}

// CreatePosts mocks base method.
func (m *MockStore) CreatePosts(ctx context.Context, arg db.CreatePostsParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePosts", ctx, arg)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePosts indicates an expected call of CreatePosts.
func (mr *MockStoreMockRecorder) CreatePosts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePosts", reflect.TypeOf((*MockStore)(nil).CreatePosts), ctx, arg)
}

// CreateTaxonomy mocks base method.
func (m *MockStore) CreateTaxonomy(ctx context.Context, arg db.CreateTaxonomyParams) (db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaxonomy", ctx, arg)
	ret0, _ := ret[0].(db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaxonomy indicates an expected call of CreateTaxonomy.
func (mr *MockStoreMockRecorder) CreateTaxonomy(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaxonomy", reflect.TypeOf((*MockStore)(nil).CreateTaxonomy), ctx, arg)
}

// CreateTaxonomyAndLinkTx mocks base method.
func (m *MockStore) CreateTaxonomyAndLinkTx(ctx context.Context, arg db.CreateTaxonomyAndLinkTxParams) (db.CreateTaxonomyAndLinkTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaxonomyAndLinkTx", ctx, arg)
	ret0, _ := ret[0].(db.CreateTaxonomyAndLinkTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaxonomyAndLinkTx indicates an expected call of CreateTaxonomyAndLinkTx.
func (mr *MockStoreMockRecorder) CreateTaxonomyAndLinkTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaxonomyAndLinkTx", reflect.TypeOf((*MockStore)(nil).CreateTaxonomyAndLinkTx), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// CreateUserPost mocks base method.
func (m *MockStore) CreateUserPost(ctx context.Context, arg db.CreateUserPostParams) (db.UserPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPost", ctx, arg)
	ret0, _ := ret[0].(db.UserPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPost indicates an expected call of CreateUserPost.
func (mr *MockStoreMockRecorder) CreateUserPost(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPost", reflect.TypeOf((*MockStore)(nil).CreateUserPost), ctx, arg)
}

// DeleteImage mocks base method.
func (m *MockStore) DeleteImage(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockStoreMockRecorder) DeleteImage(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockStore)(nil).DeleteImage), ctx, id)
}

// DeleteImagePosts mocks base method.
func (m *MockStore) DeleteImagePosts(ctx context.Context, imageID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImagePosts", ctx, imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImagePosts indicates an expected call of DeleteImagePosts.
func (mr *MockStoreMockRecorder) DeleteImagePosts(ctx, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImagePosts", reflect.TypeOf((*MockStore)(nil).DeleteImagePosts), ctx, imageID)
}

// DeleteImageTx mocks base method.
func (m *MockStore) DeleteImageTx(ctx context.Context, arg db.DeleteImageTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageTx", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageTx indicates an expected call of DeleteImageTx.
func (mr *MockStoreMockRecorder) DeleteImageTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageTx", reflect.TypeOf((*MockStore)(nil).DeleteImageTx), ctx, arg)
}

// DeleteImagesByUserID mocks base method.
func (m *MockStore) DeleteImagesByUserID(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImagesByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImagesByUserID indicates an expected call of DeleteImagesByUserID.
func (mr *MockStoreMockRecorder) DeleteImagesByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImagesByUserID", reflect.TypeOf((*MockStore)(nil).DeleteImagesByUserID), ctx, userID)
}

// DeletePost mocks base method.
func (m *MockStore) DeletePost(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockStoreMockRecorder) DeletePost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStore)(nil).DeletePost), ctx, id)
}

// DeletePostImage mocks base method.
func (m *MockStore) DeletePostImage(ctx context.Context, arg db.DeletePostImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostImage", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostImage indicates an expected call of DeletePostImage.
func (mr *MockStoreMockRecorder) DeletePostImage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostImage", reflect.TypeOf((*MockStore)(nil).DeletePostImage), ctx, arg)
}

// DeletePostImages mocks base method.
func (m *MockStore) DeletePostImages(ctx context.Context, postID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostImages", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostImages indicates an expected call of DeletePostImages.
func (mr *MockStoreMockRecorder) DeletePostImages(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostImages", reflect.TypeOf((*MockStore)(nil).DeletePostImages), ctx, postID)
}

// DeletePostTaxonomies mocks base method.
func (m *MockStore) DeletePostTaxonomies(ctx context.Context, postID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostTaxonomies", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostTaxonomies indicates an expected call of DeletePostTaxonomies.
func (mr *MockStoreMockRecorder) DeletePostTaxonomies(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostTaxonomies", reflect.TypeOf((*MockStore)(nil).DeletePostTaxonomies), ctx, postID)
}

// DeletePostTaxonomy mocks base method.
func (m *MockStore) DeletePostTaxonomy(ctx context.Context, arg db.DeletePostTaxonomyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostTaxonomy", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostTaxonomy indicates an expected call of DeletePostTaxonomy.
func (mr *MockStoreMockRecorder) DeletePostTaxonomy(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostTaxonomy", reflect.TypeOf((*MockStore)(nil).DeletePostTaxonomy), ctx, arg)
}

// DeletePostTx mocks base method.
func (m *MockStore) DeletePostTx(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostTx", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostTx indicates an expected call of DeletePostTx.
func (mr *MockStoreMockRecorder) DeletePostTx(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostTx", reflect.TypeOf((*MockStore)(nil).DeletePostTx), ctx, id)
}

// DeletePostsByUserID mocks base method.
func (m *MockStore) DeletePostsByUserID(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostsByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostsByUserID indicates an expected call of DeletePostsByUserID.
func (mr *MockStoreMockRecorder) DeletePostsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostsByUserID", reflect.TypeOf((*MockStore)(nil).DeletePostsByUserID), ctx, userID)
}

// DeleteTaxonomy mocks base method.
func (m *MockStore) DeleteTaxonomy(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaxonomy", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaxonomy indicates an expected call of DeleteTaxonomy.
func (mr *MockStoreMockRecorder) DeleteTaxonomy(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaxonomy", reflect.TypeOf((*MockStore)(nil).DeleteTaxonomy), ctx, id)
}

// DeleteTaxonomyPosts mocks base method.
func (m *MockStore) DeleteTaxonomyPosts(ctx context.Context, taxonomyID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaxonomyPosts", ctx, taxonomyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaxonomyPosts indicates an expected call of DeleteTaxonomyPosts.
func (mr *MockStoreMockRecorder) DeleteTaxonomyPosts(ctx, taxonomyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaxonomyPosts", reflect.TypeOf((*MockStore)(nil).DeleteTaxonomyPosts), ctx, taxonomyID)
}

// DeleteTaxonomyTx mocks base method.
func (m *MockStore) DeleteTaxonomyTx(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaxonomyTx", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaxonomyTx indicates an expected call of DeleteTaxonomyTx.
func (mr *MockStoreMockRecorder) DeleteTaxonomyTx(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaxonomyTx", reflect.TypeOf((*MockStore)(nil).DeleteTaxonomyTx), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), ctx, id)
}

// DeleteUserPost mocks base method.
func (m *MockStore) DeleteUserPost(ctx context.Context, postID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPost", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPost indicates an expected call of DeleteUserPost.
func (mr *MockStoreMockRecorder) DeleteUserPost(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPost", reflect.TypeOf((*MockStore)(nil).DeleteUserPost), ctx, postID)
}

// DeleteUserPostsByUserID mocks base method.
func (m *MockStore) DeleteUserPostsByUserID(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPostsByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPostsByUserID indicates an expected call of DeleteUserPostsByUserID.
func (mr *MockStoreMockRecorder) DeleteUserPostsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPostsByUserID", reflect.TypeOf((*MockStore)(nil).DeleteUserPostsByUserID), ctx, userID)
}

// DeleteUserSessions mocks base method.
func (m *MockStore) DeleteUserSessions(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSessions", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSessions indicates an expected call of DeleteUserSessions.
func (mr *MockStoreMockRecorder) DeleteUserSessions(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSessions", reflect.TypeOf((*MockStore)(nil).DeleteUserSessions), ctx, id)
}

// DeleteUserTx mocks base method.
func (m *MockStore) DeleteUserTx(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserTx", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserTx indicates an expected call of DeleteUserTx.
func (mr *MockStoreMockRecorder) DeleteUserTx(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserTx", reflect.TypeOf((*MockStore)(nil).DeleteUserTx), ctx, id)
}

// DeleteUserWithTransferTx mocks base method.
func (m *MockStore) DeleteUserWithTransferTx(ctx context.Context, arg db.DeleteUserWithTransferTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserWithTransferTx", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserWithTransferTx indicates an expected call of DeleteUserWithTransferTx.
func (mr *MockStoreMockRecorder) DeleteUserWithTransferTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWithTransferTx", reflect.TypeOf((*MockStore)(nil).DeleteUserWithTransferTx), ctx, arg)
}

// ExecTx mocks base method.
func (m *MockStore) ExecTx(ctx context.Context, fn func(*db.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockStoreMockRecorder) ExecTx(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockStore)(nil).ExecTx), ctx, fn)
}

// GetImage mocks base method.
func (m *MockStore) GetImage(ctx context.Context, id int64) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, id)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockStoreMockRecorder) GetImage(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockStore)(nil).GetImage), ctx, id)
}

// GetImagePostCount mocks base method.
func (m *MockStore) GetImagePostCount(ctx context.Context, imageID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagePostCount", ctx, imageID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagePostCount indicates an expected call of GetImagePostCount.
func (mr *MockStoreMockRecorder) GetImagePostCount(ctx, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagePostCount", reflect.TypeOf((*MockStore)(nil).GetImagePostCount), ctx, imageID)
}

// GetImagesByPost mocks base method.
func (m *MockStore) GetImagesByPost(ctx context.Context, postID int64) ([]db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByPost", ctx, postID)
	ret0, _ := ret[0].([]db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByPost indicates an expected call of GetImagesByPost.
func (mr *MockStoreMockRecorder) GetImagesByPost(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByPost", reflect.TypeOf((*MockStore)(nil).GetImagesByPost), ctx, postID)
}

// GetImagesByUser mocks base method.
func (m *MockStore) GetImagesByUser(ctx context.Context, arg db.GetImagesByUserParams) ([]db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByUser", ctx, arg)
	ret0, _ := ret[0].([]db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByUser indicates an expected call of GetImagesByUser.
func (mr *MockStoreMockRecorder) GetImagesByUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByUser", reflect.TypeOf((*MockStore)(nil).GetImagesByUser), ctx, arg)
}

// GetPopularImages mocks base method.
func (m *MockStore) GetPopularImages(ctx context.Context, limit int32) ([]db.GetPopularImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopularImages", ctx, limit)
	ret0, _ := ret[0].([]db.GetPopularImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopularImages indicates an expected call of GetPopularImages.
func (mr *MockStoreMockRecorder) GetPopularImages(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopularImages", reflect.TypeOf((*MockStore)(nil).GetPopularImages), ctx, limit)
}

// GetPopularTaxonomies mocks base method.
func (m *MockStore) GetPopularTaxonomies(ctx context.Context, limit int32) ([]db.GetPopularTaxonomiesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopularTaxonomies", ctx, limit)
	ret0, _ := ret[0].([]db.GetPopularTaxonomiesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopularTaxonomies indicates an expected call of GetPopularTaxonomies.
func (mr *MockStoreMockRecorder) GetPopularTaxonomies(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopularTaxonomies", reflect.TypeOf((*MockStore)(nil).GetPopularTaxonomies), ctx, limit)
}

// GetPost mocks base method.
func (m *MockStore) GetPost(ctx context.Context, id int64) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, id)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockStoreMockRecorder) GetPost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockStore)(nil).GetPost), ctx, id)
}

// GetPostImageCount mocks base method.
func (m *MockStore) GetPostImageCount(ctx context.Context, postID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostImageCount", ctx, postID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostImageCount indicates an expected call of GetPostImageCount.
func (mr *MockStoreMockRecorder) GetPostImageCount(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostImageCount", reflect.TypeOf((*MockStore)(nil).GetPostImageCount), ctx, postID)
}

// GetPostTaxonomies mocks base method.
func (m *MockStore) GetPostTaxonomies(ctx context.Context, postID int64) ([]db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostTaxonomies", ctx, postID)
	ret0, _ := ret[0].([]db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostTaxonomies indicates an expected call of GetPostTaxonomies.
func (mr *MockStoreMockRecorder) GetPostTaxonomies(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostTaxonomies", reflect.TypeOf((*MockStore)(nil).GetPostTaxonomies), ctx, postID)
}

// GetPostTaxonomyCount mocks base method.
func (m *MockStore) GetPostTaxonomyCount(ctx context.Context, postID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostTaxonomyCount", ctx, postID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostTaxonomyCount indicates an expected call of GetPostTaxonomyCount.
func (mr *MockStoreMockRecorder) GetPostTaxonomyCount(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostTaxonomyCount", reflect.TypeOf((*MockStore)(nil).GetPostTaxonomyCount), ctx, postID)
}

// GetPostWithImages mocks base method.
func (m *MockStore) GetPostWithImages(ctx context.Context, id int64) (db.GetPostWithImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostWithImages", ctx, id)
	ret0, _ := ret[0].(db.GetPostWithImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostWithImages indicates an expected call of GetPostWithImages.
func (mr *MockStoreMockRecorder) GetPostWithImages(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostWithImages", reflect.TypeOf((*MockStore)(nil).GetPostWithImages), ctx, id)
}

// GetPostsByUserWithImages mocks base method.
func (m *MockStore) GetPostsByUserWithImages(ctx context.Context, arg db.GetPostsByUserWithImagesParams) ([]db.GetPostsByUserWithImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUserWithImages", ctx, arg)
	ret0, _ := ret[0].([]db.GetPostsByUserWithImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUserWithImages indicates an expected call of GetPostsByUserWithImages.
func (mr *MockStoreMockRecorder) GetPostsByUserWithImages(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUserWithImages", reflect.TypeOf((*MockStore)(nil).GetPostsByUserWithImages), ctx, arg)
}

// GetTaxonomy mocks base method.
func (m *MockStore) GetTaxonomy(ctx context.Context, id int64) (db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxonomy", ctx, id)
	ret0, _ := ret[0].(db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxonomy indicates an expected call of GetTaxonomy.
func (mr *MockStoreMockRecorder) GetTaxonomy(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxonomy", reflect.TypeOf((*MockStore)(nil).GetTaxonomy), ctx, id)
}

// GetTaxonomyByName mocks base method.
func (m *MockStore) GetTaxonomyByName(ctx context.Context, name string) (db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxonomyByName", ctx, name)
	ret0, _ := ret[0].(db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxonomyByName indicates an expected call of GetTaxonomyByName.
func (mr *MockStoreMockRecorder) GetTaxonomyByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxonomyByName", reflect.TypeOf((*MockStore)(nil).GetTaxonomyByName), ctx, name)
}

// GetTaxonomyPostCount mocks base method.
func (m *MockStore) GetTaxonomyPostCount(ctx context.Context, taxonomyID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxonomyPostCount", ctx, taxonomyID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxonomyPostCount indicates an expected call of GetTaxonomyPostCount.
func (mr *MockStoreMockRecorder) GetTaxonomyPostCount(ctx, taxonomyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxonomyPostCount", reflect.TypeOf((*MockStore)(nil).GetTaxonomyPostCount), ctx, taxonomyID)
}

// GetTaxonomyPosts mocks base method.
func (m *MockStore) GetTaxonomyPosts(ctx context.Context, arg db.GetTaxonomyPostsParams) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxonomyPosts", ctx, arg)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxonomyPosts indicates an expected call of GetTaxonomyPosts.
func (mr *MockStoreMockRecorder) GetTaxonomyPosts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxonomyPosts", reflect.TypeOf((*MockStore)(nil).GetTaxonomyPosts), ctx, arg)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(ctx context.Context, id int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(ctx context.Context, email string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), ctx, email)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(ctx context.Context, username string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), ctx, username)
}

// GetUserImageCount mocks base method.
func (m *MockStore) GetUserImageCount(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserImageCount", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserImageCount indicates an expected call of GetUserImageCount.
func (mr *MockStoreMockRecorder) GetUserImageCount(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserImageCount", reflect.TypeOf((*MockStore)(nil).GetUserImageCount), ctx, userID)
}

// ListImages mocks base method.
func (m *MockStore) ListImages(ctx context.Context, arg db.ListImagesParams) ([]db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", ctx, arg)
	ret0, _ := ret[0].([]db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockStoreMockRecorder) ListImages(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockStore)(nil).ListImages), ctx, arg)
}

// ListImagesWithPostCount mocks base method.
func (m *MockStore) ListImagesWithPostCount(ctx context.Context, arg db.ListImagesWithPostCountParams) ([]db.ListImagesWithPostCountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImagesWithPostCount", ctx, arg)
	ret0, _ := ret[0].([]db.ListImagesWithPostCountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImagesWithPostCount indicates an expected call of ListImagesWithPostCount.
func (mr *MockStoreMockRecorder) ListImagesWithPostCount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImagesWithPostCount", reflect.TypeOf((*MockStore)(nil).ListImagesWithPostCount), ctx, arg)
}

// ListPosts mocks base method.
func (m *MockStore) ListPosts(ctx context.Context, arg db.ListPostsParams) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", ctx, arg)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockStoreMockRecorder) ListPosts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockStore)(nil).ListPosts), ctx, arg)
}

// ListPostsWithImages mocks base method.
func (m *MockStore) ListPostsWithImages(ctx context.Context, arg db.ListPostsWithImagesParams) ([]db.ListPostsWithImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsWithImages", ctx, arg)
	ret0, _ := ret[0].([]db.ListPostsWithImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsWithImages indicates an expected call of ListPostsWithImages.
func (mr *MockStoreMockRecorder) ListPostsWithImages(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsWithImages", reflect.TypeOf((*MockStore)(nil).ListPostsWithImages), ctx, arg)
}

// ListTaxonomies mocks base method.
func (m *MockStore) ListTaxonomies(ctx context.Context, arg db.ListTaxonomiesParams) ([]db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaxonomies", ctx, arg)
	ret0, _ := ret[0].([]db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaxonomies indicates an expected call of ListTaxonomies.
func (mr *MockStoreMockRecorder) ListTaxonomies(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaxonomies", reflect.TypeOf((*MockStore)(nil).ListTaxonomies), ctx, arg)
}

// ListTaxonomiesWithPostCount mocks base method.
func (m *MockStore) ListTaxonomiesWithPostCount(ctx context.Context, arg db.ListTaxonomiesWithPostCountParams) ([]db.ListTaxonomiesWithPostCountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaxonomiesWithPostCount", ctx, arg)
	ret0, _ := ret[0].([]db.ListTaxonomiesWithPostCountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaxonomiesWithPostCount indicates an expected call of ListTaxonomiesWithPostCount.
func (mr *MockStoreMockRecorder) ListTaxonomiesWithPostCount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaxonomiesWithPostCount", reflect.TypeOf((*MockStore)(nil).ListTaxonomiesWithPostCount), ctx, arg)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(ctx context.Context, arg db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), ctx, arg)
}

// SearchImagesByName mocks base method.
func (m *MockStore) SearchImagesByName(ctx context.Context, arg db.SearchImagesByNameParams) ([]db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchImagesByName", ctx, arg)
	ret0, _ := ret[0].([]db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchImagesByName indicates an expected call of SearchImagesByName.
func (mr *MockStoreMockRecorder) SearchImagesByName(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchImagesByName", reflect.TypeOf((*MockStore)(nil).SearchImagesByName), ctx, arg)
}

// SearchTaxonomiesByName mocks base method.
func (m *MockStore) SearchTaxonomiesByName(ctx context.Context, arg db.SearchTaxonomiesByNameParams) ([]db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTaxonomiesByName", ctx, arg)
	ret0, _ := ret[0].([]db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTaxonomiesByName indicates an expected call of SearchTaxonomiesByName.
func (mr *MockStoreMockRecorder) SearchTaxonomiesByName(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTaxonomiesByName", reflect.TypeOf((*MockStore)(nil).SearchTaxonomiesByName), ctx, arg)
}

// TransferImagesToUser mocks base method.
func (m *MockStore) TransferImagesToUser(ctx context.Context, arg db.TransferImagesToUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferImagesToUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferImagesToUser indicates an expected call of TransferImagesToUser.
func (mr *MockStoreMockRecorder) TransferImagesToUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferImagesToUser", reflect.TypeOf((*MockStore)(nil).TransferImagesToUser), ctx, arg)
}

// TransferPostsToAdmin mocks base method.
func (m *MockStore) TransferPostsToAdmin(ctx context.Context, arg db.TransferPostsToAdminParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferPostsToAdmin", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferPostsToAdmin indicates an expected call of TransferPostsToAdmin.
func (mr *MockStoreMockRecorder) TransferPostsToAdmin(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferPostsToAdmin", reflect.TypeOf((*MockStore)(nil).TransferPostsToAdmin), ctx, arg)
}

// UpdateImage mocks base method.
func (m *MockStore) UpdateImage(ctx context.Context, arg db.UpdateImageParams) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", ctx, arg)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockStoreMockRecorder) UpdateImage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockStore)(nil).UpdateImage), ctx, arg)
}

// UpdatePost mocks base method.
func (m *MockStore) UpdatePost(ctx context.Context, arg db.UpdatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, arg)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockStoreMockRecorder) UpdatePost(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockStore)(nil).UpdatePost), ctx, arg)
}

// UpdatePostImagesTx mocks base method.
func (m *MockStore) UpdatePostImagesTx(ctx context.Context, arg db.UpdatePostImagesTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostImagesTx", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostImagesTx indicates an expected call of UpdatePostImagesTx.
func (mr *MockStoreMockRecorder) UpdatePostImagesTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostImagesTx", reflect.TypeOf((*MockStore)(nil).UpdatePostImagesTx), ctx, arg)
}

// UpdatePostTaxonomiesTx mocks base method.
func (m *MockStore) UpdatePostTaxonomiesTx(ctx context.Context, arg db.UpdatePostTaxonomiesTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostTaxonomiesTx", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostTaxonomiesTx indicates an expected call of UpdatePostTaxonomiesTx.
func (mr *MockStoreMockRecorder) UpdatePostTaxonomiesTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostTaxonomiesTx", reflect.TypeOf((*MockStore)(nil).UpdatePostTaxonomiesTx), ctx, arg)
}

// UpdatePostsUsername mocks base method.
func (m *MockStore) UpdatePostsUsername(ctx context.Context, arg db.UpdatePostsUsernameParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostsUsername", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostsUsername indicates an expected call of UpdatePostsUsername.
func (mr *MockStoreMockRecorder) UpdatePostsUsername(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostsUsername", reflect.TypeOf((*MockStore)(nil).UpdatePostsUsername), ctx, arg)
}

// UpdateTaxonomy mocks base method.
func (m *MockStore) UpdateTaxonomy(ctx context.Context, arg db.UpdateTaxonomyParams) (db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaxonomy", ctx, arg)
	ret0, _ := ret[0].(db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaxonomy indicates an expected call of UpdateTaxonomy.
func (mr *MockStoreMockRecorder) UpdateTaxonomy(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaxonomy", reflect.TypeOf((*MockStore)(nil).UpdateTaxonomy), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(ctx context.Context, arg db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), ctx, arg)
}

// UpdateUserPostsOwnership mocks base method.
func (m *MockStore) UpdateUserPostsOwnership(ctx context.Context, arg db.UpdateUserPostsOwnershipParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPostsOwnership", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPostsOwnership indicates an expected call of UpdateUserPostsOwnership.
func (mr *MockStoreMockRecorder) UpdateUserPostsOwnership(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPostsOwnership", reflect.TypeOf((*MockStore)(nil).UpdateUserPostsOwnership), ctx, arg)
}

// UpdateUserTx mocks base method.
func (m *MockStore) UpdateUserTx(ctx context.Context, arg db.UpdateUserTxParams) (db.UpdateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserTx", ctx, arg)
	ret0, _ := ret[0].(db.UpdateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserTx indicates an expected call of UpdateUserTx.
func (mr *MockStoreMockRecorder) UpdateUserTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserTx", reflect.TypeOf((*MockStore)(nil).UpdateUserTx), ctx, arg)
}
