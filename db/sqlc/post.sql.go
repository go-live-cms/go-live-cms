// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createPosts = `-- name: CreatePosts :one
INSERT INTO posts (
    name,
    description,
    user_id,
    username,
    content,
    url,
    images
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, description, user_id, username, content, images, url, created_at, changed_at
`

type CreatePostsParams struct {
	Name        string   `json:"name"`
	Description string   `json:"description"`
	UserID      int64    `json:"user_id"`
	Username    string   `json:"username"`
	Content     string   `json:"content"`
	Url         string   `json:"url"`
	Images      []string `json:"images"`
}

func (q *Queries) CreatePosts(ctx context.Context, arg CreatePostsParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPosts,
		arg.Name,
		arg.Description,
		arg.UserID,
		arg.Username,
		arg.Content,
		arg.Url,
		pq.Array(arg.Images),
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.Username,
		&i.Content,
		pq.Array(&i.Images),
		&i.Url,
		&i.CreatedAt,
		&i.ChangedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, name, description, user_id, username, content, images, url, created_at, changed_at FROM posts 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.Username,
		&i.Content,
		pq.Array(&i.Images),
		&i.Url,
		&i.CreatedAt,
		&i.ChangedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, name, description, user_id, username, content, images, url, created_at, changed_at FROM posts 
ORDER BY id DESC
LIMIT $1
OFFSET $2
`

type ListPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.Username,
			&i.Content,
			pq.Array(&i.Images),
			&i.Url,
			&i.CreatedAt,
			&i.ChangedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET name = COALESCE($1, name),
    description = COALESCE($2, description),
    user_id = COALESCE($3, user_id),
    username = COALESCE($4, username),
    content = COALESCE($5, content),
    images = COALESCE($6, images),
    url = COALESCE($7, url)
WHERE id = $8
RETURNING id, name, description, user_id, username, content, images, url, created_at, changed_at
`

type UpdatePostParams struct {
	Name        string   `json:"name"`
	Description string   `json:"description"`
	UserID      int64    `json:"user_id"`
	Username    string   `json:"username"`
	Content     string   `json:"content"`
	Images      []string `json:"images"`
	Url         string   `json:"url"`
	ID          int64    `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.Name,
		arg.Description,
		arg.UserID,
		arg.Username,
		arg.Content,
		pq.Array(arg.Images),
		arg.Url,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.Username,
		&i.Content,
		pq.Array(&i.Images),
		&i.Url,
		&i.CreatedAt,
		&i.ChangedAt,
	)
	return i, err
}
